# frozen_string_literal: true

require 'zlib'
require 'open-uri'
require 'fileutils'
require 'pathname'
require 'rubygems'
require 'rubygems/package'
require 'pp'
require 'time'
require 'date'

Pry.config.correct_indent = false if ENV["INSIDE_EMACS"]

command_set = Pry::CommandSet.new do
  block_command 'edit!', "Edit current file if it doesn't have a class" do |line_num|
    ctf = current_target_file(context)

    if line_num
      run "edit #{ctf}:#{line_num}"
    else
      run "edit #{ctf}"
    end
  end

  block_command 'cat!', 'Dump current _file_' do |line_num|
    run "cat -l #{current_target_file(context)}"
  end

  helpers do
    def current_target_file(calling_command_context)
      calling_command_context[:pry_instance].instance_variable_get('@last_file')
    end
  end
end

Pry::Commands.import command_set

class MyPryHelper
  def self.untar(archive, destination)
    Zlib::GzipReader.open(archive) do |gz|
      Gem::Package::TarReader.new(gz) do |tar|
        tar.each do |entry|
          file = Pathname.new(File.join(destination, entry.full_name))
          file.delete if file.exist? && file.file?
          FileUtils.mkdir_p(file.dirname)
          if entry.file?
            file.write(entry.read)
            file.chmod(entry.header.mode)
          elsif entry.header.typeflag == '2' # Symlink!
            File.symlink(entry.header.linkname, file)
          end
        end
      end
    end
  end

  def downloads
    Pathname.new('~/Downloads').expand_path
  end
end

def fg_boot
  require 'factory_girl'
  include FactoryGirl::Syntax::Methods
end

class Object
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  def interesting_methods
    (methods - Object.new.methods).sort
  end
end

# Monkeypatch for useful mucking about
class Array
  def self.toy
    [1, 2, 3] + %w(a b c)
  end
end

# Monkeypatch for useful mucking about
class Hash
  def self.toy
    {
      1 => 2,
      'a' => 'b',
      'foo' => 'bar',
      :hello => 'there'
    }
  end
end
