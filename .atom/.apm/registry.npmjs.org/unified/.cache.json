{"_id":"unified","_rev":"5-65eae27b33a3b9fc8b36e1cb6988f213","name":"unified","description":"Text processing framework: Parse / Transform / Compile","dist-tags":{"latest":"2.1.2"},"versions":{"1.0.0":{"name":"unified","version":"1.0.0","description":"Text processing framework: Parse / Transform / Compile","license":"MIT","keywords":["process","parse","transform","compile","stringify","retext","mdast"],"dependencies":{"attach-ware":"^1.0.0","bail":"^1.0.0","unherit":"^1.0.4","vfile":"^1.0.0","ware":"^1.3.0"},"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"files":["index.js"],"devDependencies":{"browserify":"^11.0.0","eslint":"^0.24.0","esmangle":"^1.0.0","istanbul":"^0.3.0","jscs":"^2.0.0","jscs-jsdoc":"^1.0.0","mdast":"^0.27.1","mdast-comment-config":"^0.1.2","mdast-github":"^0.3.0","mdast-lint":"^0.4.0","mdast-man":"^0.4.0","mdast-toc":"^0.5.1","mdast-validate-links":"^0.3.0","mocha":"^2.0.0"},"scripts":{"test-api":"mocha --check-leaks test.js","test-coveralls":"istanbul cover _mocha --report lcovonly -- --check-leaks test.js","test-coverage":"istanbul cover _mocha -- -- test.js","test-travis":"npm run test-coveralls","test":"npm run test-api","lint-api":"eslint .","lint-style":"jscs --reporter inline .","lint":"npm run lint-api && npm run lint-style","make":"npm run lint && npm run test-coverage","build-md":"mdast . --quiet","build-bundle":"browserify index.js -s AttachWare > unified.js","postbuild-bundle":"esmangle unified.js > unified.min.js","build":"npm run build-md && npm run build-bundle"},"gitHead":"6dae05dd38ea97bf897ee6ff808e210a59ccbc81","bugs":{"url":"https://github.com/wooorm/unified/issues"},"homepage":"https://github.com/wooorm/unified#readme","_id":"unified@1.0.0","_shasum":"630e61e18f06206e79f23e0a801a7ae6a294a7e4","_from":".","_npmVersion":"2.11.3","_nodeVersion":"2.3.3","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"630e61e18f06206e79f23e0a801a7ae6a294a7e4","tarball":"http://registry.npmjs.org/unified/-/unified-1.0.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"directories":{}},"2.0.0":{"name":"unified","version":"2.0.0","description":"Text processing framework: Parse / Transform / Compile","license":"MIT","keywords":["process","parse","transform","compile","stringify","retext","mdast"],"dependencies":{"attach-ware":"^1.0.0","bail":"^1.0.0","unherit":"^1.0.4","vfile":"^1.0.0","ware":"^1.3.0"},"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"files":["index.js"],"devDependencies":{"browserify":"^11.0.0","eslint":"^1.0.0","esmangle":"^1.0.0","istanbul":"^0.3.0","jscs":"^2.0.0","jscs-jsdoc":"^1.0.0","mdast":"^1.0.0","mdast-comment-config":"^1.0.0","mdast-github":"^1.0.0","mdast-lint":"^1.0.0","mdast-man":"^1.0.0","mdast-toc":"^1.0.0","mdast-validate-links":"^1.0.0","mocha":"^2.0.0"},"scripts":{"test-api":"mocha --check-leaks test.js","test-coveralls":"istanbul cover _mocha --report lcovonly -- --check-leaks test.js","test-coverage":"istanbul cover _mocha -- -- test.js","test-travis":"npm run test-coveralls","test":"npm run test-api","lint-api":"eslint .","lint-style":"jscs --reporter inline .","lint":"npm run lint-api && npm run lint-style","make":"npm run lint && npm run test-coverage","build-md":"mdast . --quiet","build-bundle":"browserify index.js -s AttachWare > unified.js","postbuild-bundle":"esmangle unified.js > unified.min.js","build":"npm run build-md && npm run build-bundle"},"gitHead":"b677413ded8f9f1d0504e993476ba452b3e6c992","bugs":{"url":"https://github.com/wooorm/unified/issues"},"homepage":"https://github.com/wooorm/unified#readme","_id":"unified@2.0.0","_shasum":"d059e2b9083723ccf193dcff26aac22134d5a3f2","_from":".","_npmVersion":"2.14.2","_nodeVersion":"4.0.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"d059e2b9083723ccf193dcff26aac22134d5a3f2","tarball":"http://registry.npmjs.org/unified/-/unified-2.0.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"directories":{}},"2.1.0":{"name":"unified","version":"2.1.0","description":"Text processing framework: Parse / Transform / Compile","license":"MIT","keywords":["process","parse","transform","compile","stringify","hast","retext","mdast"],"dependencies":{"attach-ware":"^1.0.0","bail":"^1.0.0","extend":"^3.0.0","unherit":"^1.0.4","vfile":"^1.0.0","ware":"^1.3.0"},"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"files":["index.js"],"devDependencies":{"browserify":"^11.0.0","eslint":"^1.0.0","esmangle":"^1.0.0","istanbul":"^0.3.0","jscs":"^2.0.0","jscs-jsdoc":"^1.0.0","mdast":"^1.0.0","mdast-comment-config":"^1.0.0","mdast-github":"^1.0.0","mdast-lint":"^1.0.0","mdast-man":"^1.0.0","mdast-toc":"^1.0.0","mdast-validate-links":"^1.0.0","mocha":"^2.0.0"},"scripts":{"test-api":"mocha --check-leaks test.js","test-coveralls":"istanbul cover _mocha --report lcovonly -- --check-leaks test.js","test-coverage":"istanbul cover _mocha -- -- test.js","test-travis":"npm run test-coveralls","test":"npm run test-api","lint-api":"eslint .","lint-style":"jscs --reporter inline .","lint":"npm run lint-api && npm run lint-style","make":"npm run lint && npm run test-coverage","build-md":"mdast . --quiet","build-bundle":"browserify index.js -s AttachWare > unified.js","postbuild-bundle":"esmangle unified.js > unified.min.js","build":"npm run build-md && npm run build-bundle"},"gitHead":"b00d9635679b11c229ddcf6c76b0e724c46e74ae","bugs":{"url":"https://github.com/wooorm/unified/issues"},"homepage":"https://github.com/wooorm/unified#readme","_id":"unified@2.1.0","_shasum":"d7d7214436ad43e80a80681171725b2ac28223c5","_from":".","_npmVersion":"3.3.5","_nodeVersion":"4.1.1","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"d7d7214436ad43e80a80681171725b2ac28223c5","tarball":"http://registry.npmjs.org/unified/-/unified-2.1.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"directories":{}},"2.1.1":{"name":"unified","version":"2.1.1","description":"Text processing framework: Parse / Transform / Compile","license":"MIT","keywords":["process","parse","transform","compile","stringify","hast","retext","mdast"],"dependencies":{"attach-ware":"^1.0.0","bail":"^1.0.0","extend":"^3.0.0","unherit":"^1.0.4","vfile":"^1.0.0","ware":"^1.3.0"},"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"files":["index.js"],"devDependencies":{"browserify":"^11.0.0","eslint":"^1.0.0","esmangle":"^1.0.0","istanbul":"^0.3.0","jscs":"^2.0.0","jscs-jsdoc":"^1.0.0","mdast":"^1.0.0","mdast-comment-config":"^1.0.0","mdast-github":"^1.0.0","mdast-lint":"^1.0.0","mdast-man":"^1.0.0","mdast-toc":"^1.0.0","mdast-validate-links":"^1.0.0","mocha":"^2.0.0"},"scripts":{"test-api":"mocha --check-leaks test.js","test-coveralls":"istanbul cover _mocha --report lcovonly -- --check-leaks test.js","test-coverage":"istanbul cover _mocha -- -- test.js","test-travis":"npm run test-coveralls","test":"npm run test-api","lint-api":"eslint .","lint-style":"jscs --reporter inline .","lint":"npm run lint-api && npm run lint-style","make":"npm run lint && npm run test-coverage","build-md":"mdast . --quiet","build-bundle":"browserify index.js -s AttachWare -u node-extend > unified.js","postbuild-bundle":"esmangle unified.js > unified.min.js","build":"npm run build-md && npm run build-bundle"},"gitHead":"5b0a28133344acdec1ba4c2dd24e7838348db39d","bugs":{"url":"https://github.com/wooorm/unified/issues"},"homepage":"https://github.com/wooorm/unified#readme","_id":"unified@2.1.1","_shasum":"6eab38a701c7b5251257080ca21ae6d9c3d591f7","_from":".","_npmVersion":"3.3.5","_nodeVersion":"4.1.1","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"6eab38a701c7b5251257080ca21ae6d9c3d591f7","tarball":"http://registry.npmjs.org/unified/-/unified-2.1.1.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"directories":{}},"2.1.2":{"name":"unified","version":"2.1.2","description":"Text processing framework: Parse / Transform / Compile","license":"MIT","keywords":["process","parse","transform","compile","stringify","hast","retext","mdast"],"dependencies":{"attach-ware":"^1.0.0","bail":"^1.0.0","extend":"^3.0.0","unherit":"^1.0.4","vfile":"^1.0.0","ware":"^1.3.0"},"browser":{"node-extend":"extend"},"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"files":["index.js"],"devDependencies":{"browserify":"^11.0.0","eslint":"^1.0.0","esmangle":"^1.0.0","istanbul":"^0.3.0","jscs":"^2.0.0","jscs-jsdoc":"^1.0.0","mdast":"^1.0.0","mdast-comment-config":"^1.0.0","mdast-github":"^1.0.0","mdast-lint":"^1.0.0","mdast-man":"^1.0.0","mdast-toc":"^1.0.0","mdast-validate-links":"^1.0.0","mocha":"^2.0.0"},"scripts":{"test-api":"mocha --check-leaks test.js","test-coveralls":"istanbul cover _mocha --report lcovonly -- --check-leaks test.js","test-coverage":"istanbul cover _mocha -- -- test.js","test-travis":"npm run test-coveralls","test":"npm run test-api","lint-api":"eslint .","lint-style":"jscs --reporter inline .","lint":"npm run lint-api && npm run lint-style","make":"npm run lint && npm run test-coverage","build-md":"mdast . --quiet","build-bundle":"browserify index.js -s AttachWare > unified.js","postbuild-bundle":"esmangle unified.js > unified.min.js","build":"npm run build-md && npm run build-bundle"},"gitHead":"c397863ed7dd72e8d8b0278a1d39c24a3641344b","bugs":{"url":"https://github.com/wooorm/unified/issues"},"homepage":"https://github.com/wooorm/unified#readme","_id":"unified@2.1.2","_shasum":"c3fe3bdcf69358c03faf9c4d8acebbf4d2615044","_from":".","_npmVersion":"3.3.5","_nodeVersion":"4.1.1","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"c3fe3bdcf69358c03faf9c4d8acebbf4d2615044","tarball":"http://registry.npmjs.org/unified/-/unified-2.1.2.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"directories":{}}},"readme":"# unified [![Build Status](https://img.shields.io/travis/wooorm/unified.svg)](https://travis-ci.org/wooorm/unified) [![Coverage Status](https://img.shields.io/codecov/c/github/wooorm/unified.svg)](https://codecov.io/github/wooorm/unified)\n\nText processing framework: Parse / Transform / Compile.\n\nThis library provides the boilerplate to make parsing and compiling pluggable.\nIt’s in use by [**mdast**](https://github.com/wooorm/mdast),\n[**retext**](https://github.com/wooorm/retext), and\n[**hast**](https://github.com/wooorm/hast).\n\n## Installation\n\n[npm](https://docs.npmjs.com/cli/install):\n\n```bash\nnpm install unified\n```\n\n**unified** is also available for [bower](http://bower.io/#install-packages),\n[component](https://github.com/componentjs/component), and [duo](http://duojs.org/#getting-started),\nand as an AMD, CommonJS, and globals module, [uncompressed](unified.js) and\n[compressed](unified.min.js).\n\n## Usage\n\nFrom [**mdast**](https://github.com/wooorm/mdast/blob/master/index.js):\n\n```js\nvar unified = require('unified');\nvar Parser = require('./lib/parse.js');\nvar Compiler = require('./lib/stringify.js');\n\nmodule.exports = unified({\n    'name': 'mdast',\n    'Parser': Parser,\n    'Compiler': Compiler\n});\n```\n\n## Table of Contents\n\n*   [API](#api)\n\n    *   [unified(options)](#unifiedoptions)\n\n    *   [Processor([processor])](#processorprocessor)\n\n    *   [processor.Parser](#processorparser)\n\n    *   [processor.Compiler](#processorcompiler)\n\n    *   [Processor#use(plugin[, input...])](#processoruseplugin-input)\n\n        *   [Plugin](#plugin)\n        *   [function attacher(processor[, input...])](#function-attacherprocessor-input)\n        *   [function transformer(node, file[, next])](#function-transformernode-file-next)\n\n    *   [Processor#parse(file[, options])](#processorparsefile-options)\n\n    *   [Processor#run(node[, file][, done])](#processorrunnode-file-done)\n\n        *   [function done(err, node, file)](#function-doneerr-node-file)\n\n    *   [Processor#stringify(node[, file][, options])](#processorstringifynode-file-options)\n\n    *   [Processor#process(file[, options][, done])](#processorprocessfile-options-done)\n\n        *   [function done(err, doc, file)](#function-doneerr-doc-file)\n\n    *   [Processor#data](#processordata)\n\n*   [License](#license)\n\n## API\n\n### unified(options)\n\nCreate a new `Processor` constructor.\n\n**Parameters** — `options` (`Object`):\n\n*   `name` (`string`) — Unique namespace, e.g. `'mdast'` or `'retext'`.\n\n*   `data` (`Object`, optional) — `JSON.stringify`able dictionary providing\n    information to `Parser`, `Compiler`, and plug-ins.\n\n*   `Parser` (`Function`) — Constructor which transforms a virtual file\n    into a syntax tree. When input is parsed, this function will be\n    constructed with a `file`, `settings`, and the processor. `Parser`\n    instances must have a `parse` method which returns a `node` (an object\n    with a `type` property).\n\n    The string representation of a file can be accessed by executing\n    `file.toString();`.\n\n*   `Compiler` (`Function`) — Constructor which transforms a node\n    into a string. When input is compiled, this function will be\n    constructed with a `file`, `settings`, and the processor. `Compiler`\n    instances must have a `compile` method which returns a `string`.\n\n    The syntax tree representation of a file can be accessed by executing\n    `file.namespace(name).tree`.\n\n**Returns** — `Function` (`Processor` constructor).\n\n### Processor(\\[processor\\])\n\n> Note that all methods on the instance are also available as functions on the\n> constructor, which, when invoked, create a new instance.\n> \n> Thus, invoking `new Processor().process()` is the same as\n> `Processor.process()`.\n\nCreate a new `Processor` instance.\n\n**Parameters**\n\n*   `processor` (`Processor`, optional) — Uses all plug-ins available on the\n    reference processor instance, on the newly constructed processor instance.\n\n**Returns**\n\n`Processor`.\n\n### processor.Parser\n\n### processor.Compiler\n\nThe constructors passed to [`unified`](#unifiedoptions) at `'Parser'`\nand `'Compiler'` are stored on `Processor` instances. The `Parser`\nis responsible for parsing a virtual file into a syntax tree, and the\n`Compiler` for compiling a syntax tree into something else.\n\nWhen a processor is constructed, both are passed to [unherit](https://github.com/wooorm/unherit),\nwhich ensures that plug-ins can change how the processor instance parses\nand compiles without affecting other processors.\n\n`Parser`s must have a `parse` method, `Compiler`s a `compile` method.\n\n### Processor#use(plugin\\[, input...\\])\n\nChange the way the processor works by using a plugin.\n\n**Signatures**\n\n*   `unified = unified.use(plugin[, input...])`;\n*   `unified = unified.use(plugins)`.\n\n**Parameters**\n\n*   `plugin` (`Function`) — [Plugin](#plugin).\n*   `plugins` (`Array.<Function>`) — List of plugins.\n*   `input` (`*`) — Passed to plugin.  Specified by its documentation.\n\n**Returns**\n\n`Processor` — `this` (the context object).\n\n#### Plugin\n\nA **uniware** plugin changes the way the applied-on processor works. It does\ntwo things:\n\n*   It modifies the instance: such as changing the Parser or the Compiler;\n*   It transforms a syntax tree representation of a file.\n\nBoth have their own function. The first is called an\n[“attacher”](#function-attacherprocessor-input). The second is named a\n[“transformer”](#function-transformernode-file-next). An “attacher” may\nreturn a “transformer”.\n\n#### function attacher([processor](#processorprocessor)\\[, input...\\])\n\nTo modify the processor, create an attacher. An attacher is the thing passed to\n[`use`](#processoruseplugin-input). It can\nreceive plugin specific options, but that’s entirely up to the third-party\ndeveloper.\n\nAn **attacher** is invoked when the plugin is\n[`use`](https://github.com/wooorm/mdast#mdastuseplugin-options)d, and can\nreturn a transformer which will be called on subsequent\n[`process()`](#processorprocessfile-options-done)s and\n[`run()`](#processorrunnode-file-done)s.\n\n**Signatures**\n\n*   `transformer? = attacher(processor[, input...])`.\n\n**Parameters**\n\n*   `processor` (`Processor`) — Context on which the plugin was\n    [`use`](https://github.com/wooorm/mdast#mdastuseplugin-options)d;\n\n*   `input` (`*`) — Passed by the user of a plug-in.\n\n**Returns**\n\n[`transformer`](#function-transformernode-file-next) (optional).\n\n#### function transformer(node, file\\[, next\\])\n\nTo transform a syntax tree, create a transformer. A transformer is a simple\n(generator) function which is invoked each time a file is\n[`process()`](#processorprocessfile-options-done)s and\n[`run()`](#processorrunnode-file-done)s. A transformer should\nchange the syntax tree representation of a file.\n\n**Signatures**\n\n*   `err? = transformer(node, file)`;\n*   `transformer(node, file, next)`;\n*   `Promise.<null, Error> = transformer(node, file)`;\n*   `transformer*(node, file)`.\n\n**Parameters**\n\n*   `node` (`Node`) — Syntax tree representation of a file;\n\n*   `file` (`VFile`) — [Virtual file](https://github.com/wooorm/vfile);\n\n*   `next` (`function([err])`, optional) — If the signature includes both\n    `next`, `transformer` **may** finish asynchronous, and **must**\n    invoke `next()` on completion with an optional error.\n\n**Returns** — Optionally:\n\n*   `Error` — Exception which will be thrown;\n\n*   `Promise.<null, Error>` — Promise which must be resolved or rejected\n    on completion.\n\n### Processor#parse(file\\[, options\\])\n\nParse a document into a syntax tree.\n\nWhen given a file, stores the returned node on that file.\n\n**Signatures**\n\n*   `node = processor.parse(file|value[, options])`.\n\n**Parameters**\n\n*   `file` (`VFile`) — [Virtual file](https://github.com/wooorm/vfile).\n*   `value` (`string`) — String representation of a file.\n*   `options` (`Object`) — Configuration given to the parser.\n\n**Returns**\n\n`Node` — (`Object`).\n\n### Processor#run(node\\[, file\\]\\[, done\\])\n\nTransform a syntax tree by applying plug-ins to it.\n\nEither a node or a file which was previously passed to `processor.parse()`,\nmust be given.\n\n**Signatures**\n\n*   `node = processor.run(node[, file|value][, done])`;\n*   `node = processor.run(file[, done])`.\n\n**Parameters**\n\n*   `node` (`Object`) — Syntax tree as returned by `parse()`;\n*   `file` (`VFile`) — [Virtual file](https://github.com/wooorm/vfile).\n*   `value` (`string`) — String representation of a file.\n*   `done` ([`function done(err, node, file)`](#function-doneerr-node-file)).\n\n**Returns**\n\n`Node` — The given syntax tree node.\n\n**Throws**\n\nWhen no `node` was given and no node was found on the file.\n\n#### function done(err, node, file)\n\nInvoked when transformation is complete.\n\n**Signatures**\n\n*   `function done(err)`;\n*   `function done(null, node, file)`.\n\n**Parameters**\n\n*   `exception` (`Error`) — Failure;\n*   `doc` (`string`) — Document generated by the process;\n*   `file` (`File`) — File object representing the input file;\n\n### Processor#stringify(node\\[, file\\]\\[, options\\])\n\nCompile a syntax tree into a document.\n\nEither a node or a file which was previously passed to `processor.parse()`,\nmust be given.\n\n**Signatures**\n\n*   `doc = processor.stringify(node[, file|value][, options])`;\n*   `doc = processor.stringify(file[, options])`.\n\n**Parameters**\n\n*   `node` (`Object`) — Syntax tree as returned by `parse()`;\n*   `file` (`VFile`) — [Virtual file](https://github.com/wooorm/vfile).\n*   `value` (`string`) — String representation of a file.\n*   `options` (`Object`) — Configuration.\n\n**Returns**\n\n`doc` (`string`) — Document.\n\n**Throws**\n\nWhen no `node` was given and no node was found on the file.\n\n### Processor#process(file\\[, options\\]\\[, done\\])\n\nParse / Transform / Compile. When an async transformer is used,\n`null` is returned and `done` must be given to receive the results\nupon completion.\n\n**Signatures**\n\n*   `doc = processor.process(file|value[, options][, done])`.\n\n**Parameters**\n\n*   `file` (`File`) — [Virtual file](https://github.com/wooorm/vfile);\n*   `value` (`string`) — String representation of a file;\n*   `options` (`Object`) — Configuration.\n*   `done` ([`function done(err?, doc?, file?)`](#function-doneerr-doc-file)).\n\n**Returns**\n\n`string` — Document generated by the process;\n\n#### function done(err, doc, file)\n\nInvoked when processing is complete.\n\n**Signatures**\n\n*   `function done(err)`;\n*   `function done(null, doc, file)`.\n\n**Parameters**\n\n*   `exception` (`Error`) — Failure;\n*   `doc` (`string`) — Document generated by the process;\n*   `file` (`File`) — File object representing the input file;\n\n### Processor#data\n\n`JSON.stringify`able dictionary providing information to `Parser`, `Compiler`,\nand plug-ins. Cloned when a `Processor` is constructed and to `processor.data`.\n\n**Type**: `Object`, optional.\n\n## License\n\n[MIT](LICENSE) © [Titus Wormer](http://wooorm.com)\n","maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"time":{"modified":"2015-10-23T20:20:14.313Z","created":"2015-07-31T09:33:35.699Z","1.0.0":"2015-07-31T09:33:35.699Z","2.0.0":"2015-09-16T11:51:57.961Z","2.1.0":"2015-10-10T15:18:29.036Z","2.1.1":"2015-10-14T18:19:18.664Z","2.1.2":"2015-10-23T20:20:14.313Z"},"homepage":"https://github.com/wooorm/unified#readme","keywords":["process","parse","transform","compile","stringify","hast","retext","mdast"],"repository":{"type":"git","url":"git+https://github.com/wooorm/unified.git"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com"},"bugs":{"url":"https://github.com/wooorm/unified/issues"},"license":"MIT","readmeFilename":"readme.md","_attachments":{},"_etag":"\"48P0HES2O9F0GAROQ81HI1VCT\""}